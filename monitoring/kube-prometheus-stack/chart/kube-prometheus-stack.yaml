---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 41.9.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  timeout: 20m
  install:
    crds: Create
  upgrade:
    crds: CreateReplace
  values:
    prometheusOperator:
      createCustomResource: true
      # prometheusConfigReloaderImage:
      #   repository: quay.io/coreos/prometheus-config-reloader
      #   tag: v0.39.0
      # configmapReloadImage:
      #   repository: jimmidyson/configmap-reload
      #   tag: v0.4.0
      prometheusConfigReloader:
        resources:
          limits:
            cpu: 200m
    alertmanager:
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: synology-csi-retain
              resources:
                requests:
                  storage: 10Gi
        tolerations:
        - key: "arm"
          operator: "Exists"
        podMetadata:
          annotations:
            backup.velero.io/backup-volumes: alertmanager-kube-prometheus-stack-alertmanager-db
        podAntiAffinity: "hard"
      ingress:
        enabled: true
        ingressClassName: nginx
        pathType: Prefix
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
        hosts:
        - prom-alert.davishaus.dev
        tls:
        - hosts:
          - prom-alert.davishaus.dev
          secretName: prom-alert-tls-external
      config:
        global:
          resolve_timeout: 5m
        route:
          # group_by: ['alertname', 'job']
          # group_wait: 30s
          # group_interval: 5m
          # repeat_interval: 6h
          receiver: 'slack-notifications'
          # receiver: 'pagerduty'
          routes:
            - match:
                alertname: Watchdog
              receiver: 'null'
            - match:
                alertname: InfoInhibitor
              receiver: 'null'
            - receiver: 'slack-notifications'
        inhibit_rules:
        - source_match:
            severity: 'critical'
          target_match:
            severity: 'warning'
          # Apply inhibition if the alertname is the same.
          equal: ['alertname', 'namespace']
        templates: ["*.tmpl"]
    nodeExporter:
      enabled: true
    prometheus-node-exporter:
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: instance
      tolerations:
      - key: "arm"
        operator: "Exists"
      - key: "armhf"
        operator: "Exists"
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
    grafana:
      enabled: false
      forceDeployDashboards: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: false
      endpoints:
        - 10.77.1.91
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeScheduler:
      enabled: false
      endpoints:
        - 10.77.1.91
      service:
        enabled: true
        port: 10259
        targetPort: 10259
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeProxy:
      enabled: false
      endpoints:
        - 10.77.1.91
    kubeEtcd:
      enabled: false
      endpoints:
        - 10.77.1.91
      service:
        enabled: true
        port: 2381
        targetPort: 2381
    prometheus:
      ingress:
        enabled: true
        ingressClassName: nginx
        pathType: Prefix
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
          nginx.ingress.kubernetes.io/auth-response-headers: Set-Cookie,X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid
          nginx.ingress.kubernetes.io/auth-signin: https://prom-server.davishaus.dev/outpost.goauthentik.io/start?rd=$escaped_request_uri
          nginx.ingress.kubernetes.io/auth-snippet: |
            proxy_set_header X-Forwarded-Host $http_host;
          nginx.ingress.kubernetes.io/auth-url: http://ak-outpost-davishaus.auth.svc.cluster.local:9000/outpost.goauthentik.io/auth/nginx
        hosts:
        - prom-server.davishaus.dev
        tls:
        - hosts:
          - prom-server.davishaus.dev
          secretName: prom-server-tls-external
      prometheusSpec:
        # image:
        #   repository: quay.io/prometheus/prometheus
        #   tag: v2.20.0
        replicas: 2
        replicaExternalLabelName: "replica"
        ruleSelector: {}
        ruleNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: synology-csi-retain
              resources:
                requests:
                  storage: 10Gi
        # tolerations:
        # - key: "arm"
        #   operator: "Exists"
        podMetadata:
          annotations:
            backup.velero.io/backup-volumes: prometheus-kube-prometheus-stack-prometheus-db
        resources:
          requests:
            memory: 2000Mi
            cpu: 250m
          limits:
            memory: 4000Mi
        # affinity:
        #   podAntiAffinity:
        #     requiredDuringSchedulingIgnoredDuringExecution:
        #     - labelSelector:
        #         matchExpressions:
        #         - key: app.kubernetes.io/name
        #           operator: In
        #           values:
        #           - prometheus
        #       topologyKey: "kubernetes.io/hostname"
        podAntiAffinity: "hard"
  valuesFrom:
    - kind: Secret
      name: "kube-prometheus-stack-helm-values"
      optional: false
