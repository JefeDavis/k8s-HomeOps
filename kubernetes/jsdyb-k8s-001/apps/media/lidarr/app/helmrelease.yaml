---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app lidarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.6.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  values:
    controllers:
      *app :
        type: statefulset
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          *app :
            image:
              repository: ghcr.io/onedr0p/lidarr
              tag: 2.4.3.4248@sha256:fcf7417a7dfa9967a78d668904c62888272bd6dd814b4b9c4500618f51be6b86

            env:
              TZ: ${TIMEZONE}
              LIDARR__INSTANCE_NAME: Lidarr
              LIDARR__PORT: &port 8686
              LIDARR__LOG_LEVEL: info
              LIDARR__ANALYTICS_ENABLED: "False"
              LIDARR__APPLICATION_URL: "https://lidarr.${EXTERNAL_DOMAIN}"
              LIDARR__API_KEY:
                valueFrom:
                  secretKeyRef:
                    name: starr-apps-secret
                    key: LIDARR_API_KEY
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL
            resources:
              requests:
                memory: 350Mi
                cpu: 5m
              limits:
                memory: 431Mi

          exporter:
            image: 
              repository: ghcr.io/onedr0p/exportarr
              tag: v2.0.1
            args: 
              - lidarr
              - --enable-additional-metrics
            env:
              - name: URL
                value: "http://localhost"
              - name: CONFIG
                value: "/config/config.xml"
              - name: PORT
                value: &metricsPort 9709
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 128Mi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }

    service:
      *app :
        controller: *app
        ports:
          http:
            port: *port
            primary: true
          metrics:
            port: *metricsPort

    # ingress:
    #   external:
    #     className: nginx-internal
    #     annotations:
    #       cert-manager.io/cluster-issuer: letsencrypt-prod
    #       theme.home.arpa/enabled: "true"
    #       hajimari.io/enable: "true"
    #       hajimari.io/icon: "mdi:headphones"
    #     hosts:
    #       - host: &host "lidarr.${EXTERNAL_DOMAIN}"
    #         paths:
    #           - path: /
    #             service:
    #               identifier: *app
    #               port: *port
    #     tls:
    #       - hosts:
    #           - *host
    #         secretName: lidarr-tls-external
                
    route:
      *app :
        enabled: true
        kind: HTTPRoute
        parentRefs:
          - group: gateway.networking.k8s.io
            kind: Gateway
            name: private-gateway
            namespace: network
        hostnames:
          - &host lidarr.${EXTERNAL_DOMAIN}
        rules:
          - backendRefs:
              - name: *app
                kind: Service
                port: *port
            matches:
              - path:
                  type: PathPrefix
                  value: /

    persistence:
      config:
        existingClaim: ${VOLSYNC_CLAIM}
        globalMounts:
          - path: /config

      media:
        existingClaim: nfs-media
        advancedMounts:
          *app :
            *app :
              - path: /media

      backups:
        type: custom
        volumeSpec:
          nfs:
            server: "${SYNOLOGY_ADDR}"
            path: /volume1/backups/lidarr
        advancedMounts:
          *app :
            *app :
              - path: /config/Backups

      tmp:
        type: emptyDir
        advancedMounts:
          *app :
            *app :
              - path: /tmp

    serviceMonitor:
      metrics:
        enabled: true
        serviceName: *app
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 10m
            scrapeTimeout: 10s
