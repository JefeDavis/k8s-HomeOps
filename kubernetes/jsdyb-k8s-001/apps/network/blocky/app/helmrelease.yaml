---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app blocky
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.6.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  values:
    controllers:
      *app :
        type: deployment
        replicas: 2
        strategy: RollingUpdate
        rollingUpdate:
          unavailable: "90%"
        annotations:
          reloader.stakater.com/auto: "true"
        pod:
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app

        initContainers:
          configure:
            image:
              repository: ghcr.io/dmfrey/bash
              tag: 5.2.26-alpine3.20
            command:
              - "/usr/local/bin/bash"
              - -c
              - envsubst < /tmp/config.yml > /config/config.yml
            env:
              - name: BLOCKY_DATABASE_URI
                valueFrom:
                  secretKeyRef:
                    name: pg-blocky-app
                    key: uri
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

        containers:
          app:
            image:
              repository: ghcr.io/0xerr0r/blocky
              tag: v0.26@sha256:b259ada3f943e73283f1fc5e84ac39a791afec7de86515d1aeccc03d2c39e595
            args: ["--config", &dir "/config"]
            env:
              TZ: ${TIMEZONE}
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                add: ["NET_BIND_SERVICE"]
                drop: ["ALL"]
            resources:
              requests:
                cpu: 10m
                memory: 128Mi
              limits:
                memory: 1Gi
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  exec:
                    command:
                      - /app/blocky
                      - healthcheck
                  initialDelaySeconds: 15
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false

    defaultPodOptions:
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        runAsNonRoot: true
        seccompProfile: { type: "RuntimeDefault" }

    service:
      *app :
        controller: *app
        ports:
          http:
            port: &port 4000

      dns:
        controller: *app
        type: LoadBalancer
        annotations:
          io.cilium/lb-ipam-ips: ${SVC_DNS_ADDR}
        ports:
          dns-tcp:
            port: &dnsPort 53
            protocol: TCP
          dns-udp:
            port: *dnsPort
            protocol: UDP

    # ingress:
    #   internal:
    #     className: nginx-internal
    #     annotations:
    #       cert-manager.io/cluster-issuer: letsencrypt-prod
    #     hosts:
    #       - host: &host dns.${INTERNAL_DOMAIN}
    #         paths:
    #           - path: /dns-query
    #             service:
    #               identifier: *app
    #               port: *port
    #     tls:
    #       - hosts:
    #           - *host
    #         secretName: dns-tls-internal

    route:
      *app :
        enabled: true
        kind: HTTPRoute
        parentRefs:
          - kind: Gateway
            name: private-gateway
            namespace: gateway
        hostnames:
          - dns.${INTERNAL_DOMAIN}
        rules:
          - backendRefs:
              - kind: Service
                name: *app
                port: *port
            matches:
              - path:
                  type: PathPrefix
                  value: /dns-query

    persistence:
      config-tpl:
        type: configMap
        name: blocky-configmap
        advancedMounts:
          *app :
            configure:
              - path: /tmp/config.yml
                subPath: config.yml
                readOnly: true
      config:
        type: emptyDir
        globalMounts:
          - path: /config

    serviceMonitor:
      app:
        serviceName: *app
        endpoints:
          - port: http
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 10s
