---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app headscale
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.2.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  values:
    controllers:
      *app :
        type: statefulset
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          *app :
            image:
              repository: ghcr.io/juanfont/headscale
              tag: 0.23.0-alpha12@sha256:31c31103931fee0269017a21330332d83269ccd139f736c8ce8d0cc8ab053068
            args: ["headscale", "serve"]
            env:
              TZ: ${TIMEZONE}
              HEADSCALE_OIDC_ISSUER:
                secretKeyRef:
                  name: headscale-secret
                  key: HEADSCALE_OIDC_ISSUER
              HEADSCALE_OIDC_CLIENT_ID:
                secretKeyRef:
                  name: headscale-secret
                  key: HEADSCALE_OIDC_CLIENT_ID
              HEADSCALE_OIDC_CLIENT_SECRET:
                secretKeyRef:
                  name: headscale-secret
                  key: HEADSCALE_OIDC_CLIENT_SECRET

              HEADSCALE_DATABASE_TYPE: postgres
              HEADSCALE_DATABASE_POSTGRES_HOST:
                secretKeyRef:
                  name: pg-headscale-app
                  key: host
              HEADSCALE_DATABASE_POSTGRES_PORT:
                secretKeyRef:
                  name: pg-headscale-app
                  key: port
              HEADSCALE_DATABASE_POSTGRES_NAME:
                secretKeyRef:
                  name: pg-headscale-app
                  key: dbname
              HEADSCALE_DATABASE_POSTGRES_USER:
                secretKeyRef:
                  name: pg-headscale-app
                  key: username
              HEADSCALE_DATABASE_POSTGRES_PASS:
                secretKeyRef:
                  name: pg-headscale-app
                  key: password
            probes:
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5
              liveness:
                enabled: true
              readiness:
                enabled: true
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop: ["ALL"]
      ui:
        strategy: RollingUpdate
        containers:
          *app :
            image:
              repository: ifargle/headscale-webui
              tag: v0.7.0
              pullPolicy: IfNotPresent
            env:
              TZ: ${TIMEZONE}
              HS_SERVER: https://headscale.${EXTERNAL_DOMAIN}
              SCRIPT_NAME: /admin
              AUTH_TYPE: oidc
              KEY:
                secretKeyRef:
                  name: headscale-keys-secret
                  key:  UI_ENCRYPTION_KEY
              OIDC_AUTH_URL:
                secretKeyRef:
                  name: headscale-secret
                  key: HEADSCALE_OIDC_AUTH_URL
              OIDC_CLIENT_ID:
                secretKeyRef:
                  name: headscale-secret
                  key: HEADSCALE_OIDC_CLIENT_ID
              OIDC_CLIENT_SECRET:
                secretKeyRef:
                  name: headscale-secret
                  key: HEADSCALE_OIDC_CLIENT_SECRET

            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
    defaultPodOptions:
      terminationGracePeriodSeconds: 3
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        seccompProfile: { type: RuntimeDefault }

    service:
      *app :
        controller: *app
        ports:
          http:
            primary: true
            port: 8080
          metrics:
            port: 9090
          stun:
            port: 3478
      ui:
        controller: ui
        ports:
          http: 
            port: 5000

    ingress:
      *app :
        className: nginx-external
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
        hosts:
          - host: &host "headscale.${EXTERNAL_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: *app
                  port: http
              - path: /admin
                service:
                  identifier: ui
                  port: http
        tls:
          - hosts:
              - *host
            secretName: headscale-tls-external

    persistence:
      keys:
        type: secret
        name: headscale-keys-secret
        advancedMounts:
          *app :
            *app :
              - path: /etc/headscale/private.key
                subPath: private.key
              - path: /etc/headscale/noise_private.key
                subPath: noise_private.key

      config:
        type: configMap
        name: headscale-config
        globalMounts:
          - path: /etc/headscale/config.yaml
            subPath: config.yaml

      tmp:
        type: emptyDir
        advancedMounts:
          *app :
            *app :
              - path: /var/run/headscale
                subPath: run
          ui:
            *app :
              - path: /data
              - path: /tmp
    serviceMonitor:
      *app :
        enabled: true
        serviceName: *app
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 10s
