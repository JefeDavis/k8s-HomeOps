---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app tdarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.1.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  values:
    controllers:
      server:
        containers:
          *app :
            image:
              repository: ghcr.io/haveagitgat/tdarr
              tag: 2.19.01
            env:
              TZ: ${TIMEZONE}
              PUID: ${APP_UID}
              PGID: ${APP_GID}
              ffmpegPath: "/usr/local/bin/ffmpeg"
              TDARR_INSTANCE_NAME: Tdarr
              TDARR__PORT: &port 8265
              TDARR__APPLICATION_URL: &host "tdarr.${EXTERNAL_DOMAIN}"
              TDARR__LOG_LEVEL: info
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL
            resources:
              requests:
                cpu: 10m
                memory: 250Mi
      nodes:
        type: daemonset
        containers:
          *app :
            image:
              repository: ghcr.io/haveagitgat/tdarr_node
              tag: 2.19.01
            env:
              TZ: ${TIMEZONE}
              PUID: ${APP_UID}
              PGID: ${APP_GID}
              serverIP: tdarr.media.svc.cluster.local
              serverPort: &serverPort 8266
              ffmpegPath: "/usr/local/bin/ffmpeg"
              nodeName:
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL
            resources:
              requests:
                cpu: 10m
                memory: 250Mi
              limits:
                gpu.intel.com/i915: 1
        pod:
          nodeSelector:
            intel.feature.node.kubernetes.io/gpu: "true"

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: ${APP_UID}
        runAsGroup: ${APP_GID}
        fsGroup: ${APP_GID}
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: 
          - 44
        seccompProfile: { type: RuntimeDefault }

    service:
      *app :
        controller: server
        ports:
          http:
            port: *port
            primary: true
          server:
            enabled: true
            protocol: TCP
            port: *serverPort

    ingress:
      external:
        className: nginx-external
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          auth.home.arpa/enabled: "true"
          hajimari.io/enable: "true"
          hajimari.io/icon: clarity:media-changer-solid
        hosts: &hosts
          - host: *host
            paths:
              - path: /
                service:
                  identifier: *app
                  port: *port
        tls: &tls
          - hosts:
              - *host
            secretName: tdarr-tls-external
      internal:
        className: nginx-internal
        hosts: *hosts
        tls: *tls

    persistence:
      config:
        existingClaim: ${CONFIG_CLAIM}
        globalMounts:
          - path: /app/configs

      data:
        existingClaim: ${VOLSYNC_CLAIM}
        advancedMounts:
          server:
            *app :
              - path: /app/server

      media:
        existingClaim: nfs-media

      cache:
        existingClaim: tdarr-cache

      backups:
        type: custom
        volumeSpec:
          nfs:
            server: "${SYNOLOGY_ADDR}"
            path: /volume1/backups/tdarr
        advancedMounts:
          server:
            *app :
              - path: /app/server/Tdarr/Backups
