---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitor
spec:
  interval: 15m
  timeout: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 59.0.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  values:
    cleanPrometheusOperatorObjectNames: true
    alertmanager:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: nginx-external
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          auth.home.arpa/enabled: "true"
          hajimari.io/enable: "true"
          hajimari.io/icon: "mdi:alert-decagram-outline"
          hajimari.io/appName: "Alert Manager"
        hosts:
          - &host alert-manager.${EXTERNAL_DOMAIN}
        tls:
          - hosts:
              - *host
            secretName: alert-manager-tls-external

      alertmanagerSpec:
        replicas: 3
        useExistingSecret: true
        configSecret: alertmanager-config
        externalUrl: https://alert-manager.${EXTERNAL_DOMAIN}
        secrets:
          - alertmanager-secret
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 1Gi              

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            regex: (id|name)
          - action: drop
            sourceLabels:
              - __name__
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)

    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate metrics
          - sourceLabels: ["__name__"]
            regex: "(aggregator_openapi|aggregator_unavailable|apiextensions_openapi|apiserver_admission|apiserver_audit|apiserver_cache|apiserver_cel|apiserver_client|apiserver_crd|apiserver_current|apiserver_envelope|apiserver_flowcontrol|apiserver_init|apiserver_kube|apiserver_longrunning|apiserver_request|apiserver_requested|apiserver_response|apiserver_selfrequest|apiserver_storage|apiserver_terminated|apiserver_tls|apiserver_watch|apiserver_webhooks|authenticated_user|authentication|disabled_metric|etcd_bookmark|etcd_lease|etcd_request|field_validation|get_token|go|grpc_client|hidden_metric|kube_apiserver|kubernetes_build|kubernetes_feature|node_authorizer|pod_security|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|serviceaccount_legacy|serviceaccount_stale|serviceaccount_valid|watch_cache|workqueue)_(.+)"
            action: keep
          # Remove high cardinality metrics
          - sourceLabels: ["__name__"]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
            action: drop
          - sourceLabels: ["__name__"]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
            action: drop

    kubeControllerManager:
      enabled: true
      endpoints: &endpoints
        - 10.77.0.11
        - 10.77.0.12
        - 10.77.0.13

    kubeEtcd:
      enabled: true
      endpoints: *endpoints

    kubeProxy:
      enabled: false

    kubeScheduler:
      enabled: true
      endpoints: *endpoints

    kubeStateMetrics:
      enabled: true

    kube-state-metrics:
      fullnameOverrride: kube-state-metrics
      metricLabelsAllowlist:
        - "pods=[*]"
        - "deployments=[*]"
        - "statefulsets=[*]"
        - "persistentvolumeclaims=[*]"
      prometheus: &relabelings
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node
      resources:
        requests:
          cpu: 15m
          memory: 127M
        limits:
          memory: 153M

    nodeExporter:
      enabled: true
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor: *relabelings
    prometheus:
      ingress:
        enabled: true
        ingressClassName: nginx-external
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          auth.home.arpa/enabled: "true"
          hajimari.io/enable: "true"
          hajimari.io/icon: "simple-icons:prometheus"
          hajimari.io/appName: "Prometheus"
        pathType: Prefix
        hosts:
          - &host prometheus.${EXTERNAL_DOMAIN}
        tls:
          - hosts:
              - *host
            secretName: prometheus-tls-external
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        podMetadata:
          annotations:
            secret.reloader.stakater.com/reload: &secret thanos-secret
        replicas: 3
        replicaExternalLabelName: "__replica__" # must match with thanos value `.query.replicaLabel[0]`
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        enableFeatures:
          - auto-gomemlimit
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        externalUrl: https://prometheus.${EXTERNAL_DOMAIN}
        thanos:
          image: quay.io/thanos/thanos:v0.35.1@sha256:3c0ba6e10128e044f47fc4fcfd7652e4a5801a314415c49beedc1f19c364915f
          objectStorageConfig:
            name: *secret
            key: objstore.yml
          # renovate: depName=quay.io/thanos/thanos datasource=docker
          version: "0.35.1"
        retention: 2d
        retentionSize: "15GB"
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 4Gi
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 10Gi
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          annotations:
            grafana.io/folder: Kubernetes
          label: grafana.io/dashboard
          labelValue: "true"
          multicluster:
            etcd:
              enabled: true
        datasources:
          label: grafana.io/datasource
          labelValue: "true"
