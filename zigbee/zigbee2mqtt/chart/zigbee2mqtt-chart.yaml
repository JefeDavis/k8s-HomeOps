---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: zigbee2mqtt
  namespace: zigbee
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts
      chart: zigbee2mqtt
      version: 9.4.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  upgrade:
    crds: CreateReplace
  values:
    env:
      TZ: "AMerican/New York"
      ZIGBEE2MQTT_DATA: "/data"
      ZIGBEE2MQTT_CONFIG_FRONTEND_PORT: "{{ .Values.service.main.ports.main.port }}"
      # User defined
      USE_CUSTOM_CONFIG_FILE: false
      # This values are required for the autogenerated file to work.
      ZIGBEE2MQTT_CONFIG_EXPIRIMENTAL_NEW_API: true
      ZIGBEE2MQTT_CONFIG_PERMIT_JOIN: true
      ZIGBEE2MQTT_CONFIG_MQTT_SERVER: "mqtt://emqx.mqtt.svc.cluster.local"
      ZIGBEE2MQTT_CONFIG_MQTT_BASE_TOPIC: "zigbee2mqtt"
      ZIGBEE2MQTT_CONFIG_SERIAL_PORT: "/dev/ttyUSB0"
      ZIGBEE2MQTT_CONFIG_SERIAL_ADAPTER: "ezsp"
    securityContext:
      allowPrivilegeEscalation: true
      capabilities: {}
      privileged: true
      readOnlyRootFilesystem: false
      runAsNonRoot: false
    probes:
      liveness:
        enabled: false
      readiness:
        enabled: false
      startup:
        enabled: false
    initContainers:
      init-config:
        args:
          - >
            if [ -f /data/configuration.yaml ] || [ ${USE_CUSTOM_CONFIG_FILE} == true ];
            then
              echo "Initial configuration exists or User selected to use custom configuration file. Skipping...";
            else
              echo "Creating initial configuration";
              touch /data/configuration.yaml;
              echo "# Configuration bellow will be always be overridden" >> /data/configuration.yaml;
              echo "# from environment settings on the Scale Apps UI." >> /data/configuration.yaml;
              echo "# You however will not see this values change in the file." >> /data/configuration.yaml;
              echo "# It's a generated file based on the values provided on initial install." >> /data/configuration.yaml;
              echo "##########################################################" >> /data/configuration.yaml;
              echo "experimental:" >> /data/configuration.yaml;
              echo "  new_api: $ZIGBEE2MQTT_CONFIG_EXPIRIMENTAL_NEW_API" >> /data/configuration.yaml;
              echo "frontend:" >> /data/configuration.yaml;
              echo "  port: $ZIGBEE2MQTT_CONFIG_FRONTEND_PORT" >> /data/configuration.yaml;
              echo "permit_join: $ZIGBEE2MQTT_CONFIG_PERMIT_JOIN" >> /data/configuration.yaml;
              echo "mqtt:" >> /data/configuration.yaml;
              echo "  server: $ZIGBEE2MQTT_CONFIG_MQTT_SERVER" >> /data/configuration.yaml;
              echo "  base_topic: $ZIGBEE2MQTT_CONFIG_MQTT_BASE_TOPIC" >> /data/configuration.yaml;
              if [ ! -z "$ZIGBEE2MQTT_CONFIG_MQTT_USER" ];
              then
                echo "  user: $ZIGBEE2MQTT_CONFIG_MQTT_USER" >> /data/configuration.yaml;
              fi;
              if [ ! -z "$ZIGBEE2MQTT_CONFIG_MQTT_PASSWORD" ];
              then
                echo "  password: $ZIGBEE2MQTT_CONFIG_MQTT_PASSWORD" >> /data/configuration.yaml;
              fi;
              echo "serial:" >> /data/configuration.yaml;
              echo "  port: $ZIGBEE2MQTT_CONFIG_SERIAL_PORT" >> /data/configuration.yaml;
              echo "  adapter: $ZIGBEE2MQTT_CONFIG_SERIAL_ADAPTER" >> /data/configuration.yaml;
              echo "advanced:" >> /data/configuration.yaml;
              echo "  baudrate: 57600" >> /data/configuration.yaml;
              echo "##########################################################" >> /data/configuration.yaml;
              echo 'Initial configuration file created at "/data/configuration.yaml"';
            fi;
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: feature.kubernetes.io/zigbee
              operator: In
              values:
              - "true"
    persistence:
      data:
        enabled: true
        storageClass: "synology-csi-retain"
        accessMode: ReadWriteOnce
        size: 1Gi
      zigbee:
        enabled: true
        type: hostPath
        hostPath: /dev/ttyUSB0
    ingress:
      dashboard:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          # nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8"
          nginx.ingress.kubernetes.io/auth-url: "https://auth.davishaus.dev/oauth2/auth"
          nginx.ingress.kubernetes.io/auth-signin: https://auth.davishaus.dev/oauth2/start
        hosts:
          - host: zigbee2-dashboard.davishaus.dev
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - zigbee2-dashboard.davishaus.dev
            secretName: zigbee2mqtt-tls-external
  valuesFrom:
    - kind: Secret
      name: "zigbee2mqtt-helm-values"
      optional: false
